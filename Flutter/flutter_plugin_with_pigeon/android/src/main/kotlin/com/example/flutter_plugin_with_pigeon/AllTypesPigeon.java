// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.flutter_plugin_with_pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class AllTypesPigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Everything {
    private @Nullable Boolean aBool;
    public @Nullable Boolean getABool() { return aBool; }
    public void setABool(@Nullable Boolean setterArg) {
      this.aBool = setterArg;
    }

    private @Nullable Long aInt;
    public @Nullable Long getAInt() { return aInt; }
    public void setAInt(@Nullable Long setterArg) {
      this.aInt = setterArg;
    }

    private @Nullable Double aDouble;
    public @Nullable Double getADouble() { return aDouble; }
    public void setADouble(@Nullable Double setterArg) {
      this.aDouble = setterArg;
    }

    private @Nullable String aString;
    public @Nullable String getAString() { return aString; }
    public void setAString(@Nullable String setterArg) {
      this.aString = setterArg;
    }

    private @Nullable List<Object> aList;
    public @Nullable List<Object> getAList() { return aList; }
    public void setAList(@Nullable List<Object> setterArg) {
      this.aList = setterArg;
    }

    private @Nullable Map<Object, Object> aMap;
    public @Nullable Map<Object, Object> getAMap() { return aMap; }
    public void setAMap(@Nullable Map<Object, Object> setterArg) {
      this.aMap = setterArg;
    }

    private @Nullable List<List<Boolean>> nestedList;
    public @Nullable List<List<Boolean>> getNestedList() { return nestedList; }
    public void setNestedList(@Nullable List<List<Boolean>> setterArg) {
      this.nestedList = setterArg;
    }

    private @Nullable Map<String, String> mapWithAnnotations;
    public @Nullable Map<String, String> getMapWithAnnotations() { return mapWithAnnotations; }
    public void setMapWithAnnotations(@Nullable Map<String, String> setterArg) {
      this.mapWithAnnotations = setterArg;
    }

    public static class Builder {
      private @Nullable Boolean aBool;
      public @NonNull Builder setABool(@Nullable Boolean setterArg) {
        this.aBool = setterArg;
        return this;
      }
      private @Nullable Long aInt;
      public @NonNull Builder setAInt(@Nullable Long setterArg) {
        this.aInt = setterArg;
        return this;
      }
      private @Nullable Double aDouble;
      public @NonNull Builder setADouble(@Nullable Double setterArg) {
        this.aDouble = setterArg;
        return this;
      }
      private @Nullable String aString;
      public @NonNull Builder setAString(@Nullable String setterArg) {
        this.aString = setterArg;
        return this;
      }
      private @Nullable List<Object> aList;
      public @NonNull Builder setAList(@Nullable List<Object> setterArg) {
        this.aList = setterArg;
        return this;
      }
      private @Nullable Map<Object, Object> aMap;
      public @NonNull Builder setAMap(@Nullable Map<Object, Object> setterArg) {
        this.aMap = setterArg;
        return this;
      }
      private @Nullable List<List<Boolean>> nestedList;
      public @NonNull Builder setNestedList(@Nullable List<List<Boolean>> setterArg) {
        this.nestedList = setterArg;
        return this;
      }
      private @Nullable Map<String, String> mapWithAnnotations;
      public @NonNull Builder setMapWithAnnotations(@Nullable Map<String, String> setterArg) {
        this.mapWithAnnotations = setterArg;
        return this;
      }
      public @NonNull Everything build() {
        Everything pigeonReturn = new Everything();
        pigeonReturn.setABool(aBool);
        pigeonReturn.setAInt(aInt);
        pigeonReturn.setADouble(aDouble);
        pigeonReturn.setAString(aString);
        pigeonReturn.setAList(aList);
        pigeonReturn.setAMap(aMap);
        pigeonReturn.setNestedList(nestedList);
        pigeonReturn.setMapWithAnnotations(mapWithAnnotations);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("aBool", aBool);
      toMapResult.put("aInt", aInt);
      toMapResult.put("aDouble", aDouble);
      toMapResult.put("aString", aString);
      toMapResult.put("aList", aList);
      toMapResult.put("aMap", aMap);
      toMapResult.put("nestedList", nestedList);
      toMapResult.put("mapWithAnnotations", mapWithAnnotations);
      return toMapResult;
    }
    static @NonNull Everything fromMap(@NonNull Map<String, Object> map) {
      Everything pigeonResult = new Everything();
      Object aBool = map.get("aBool");
      pigeonResult.setABool((Boolean)aBool);
      Object aInt = map.get("aInt");
      pigeonResult.setAInt((aInt == null) ? null : ((aInt instanceof Integer) ? (Integer)aInt : (Long)aInt));
      Object aDouble = map.get("aDouble");
      pigeonResult.setADouble((Double)aDouble);
      Object aString = map.get("aString");
      pigeonResult.setAString((String)aString);
      Object aList = map.get("aList");
      pigeonResult.setAList((List<Object>)aList);
      Object aMap = map.get("aMap");
      pigeonResult.setAMap((Map<Object, Object>)aMap);
      Object nestedList = map.get("nestedList");
      pigeonResult.setNestedList((List<List<Boolean>>)nestedList);
      Object mapWithAnnotations = map.get("mapWithAnnotations");
      pigeonResult.setMapWithAnnotations((Map<String, String>)mapWithAnnotations);
      return pigeonResult;
    }
  }
  private static class HostEverythingCodec extends StandardMessageCodec {
    public static final HostEverythingCodec INSTANCE = new HostEverythingCodec();
    private HostEverythingCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Everything.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Everything) {
        stream.write(128);
        writeValue(stream, ((Everything) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface HostEverything {
    @NonNull Everything giveMeEverything();
    @NonNull Everything echo(Everything everything);

    /** The codec used by HostEverything. */
    static MessageCodec<Object> getCodec() {
      return HostEverythingCodec.INSTANCE;
    }

    /** Sets up an instance of `HostEverything` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HostEverything api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostEverything.giveMeEverything", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Everything output = api.giveMeEverything();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostEverything.echo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Everything everythingArg = (Everything)args.get(0);
              if (everythingArg == null) {
                throw new NullPointerException("everythingArg unexpectedly null.");
              }
              Everything output = api.echo(everythingArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class FlutterEverythingCodec extends StandardMessageCodec {
    public static final FlutterEverythingCodec INSTANCE = new FlutterEverythingCodec();
    private FlutterEverythingCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Everything.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Everything) {
        stream.write(128);
        writeValue(stream, ((Everything) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterEverything {
    private final BinaryMessenger binaryMessenger;
    public FlutterEverything(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return FlutterEverythingCodec.INSTANCE;
    }

    public void giveMeEverythingFlutter(Everything everythingArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterEverything.giveMeEverythingFlutter", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(everythingArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
